write a java program to find synonym for the given word.  if the synonym is found the return the list of the synonyms else throw an exception called SynonymNotFound with the message as "Sorry word not found in the dictionary"

initialize the list of words in the map in the static section of the application
and the same as to be invoked by Class.forName("");
when ever the request for the synyoms has come, store the count in DB

http://todomvc.com/


pojo plain old java object.

http://bit.ly/1oFeNR0

http://bit.ly.21rNyJy

RMI  remote message interface

uniform resource locator   URL
uniform resource interface  URI
electronic data interchange  edi

apach - tomcat
oracle - weblogic
ibm - web shphere
jboss - jboss
sun - glassfish


sox simple object for xml

//sample xml document 
<?xml version="1.0"?>
<emps>
	<emp salutation="mr">
		<name>
			<fname>Harry</fname>
			<lname>potter</lname>
		</name>
		<age>44</age>
		<dept-name>test</dept-name>
	</emp>

	<emp salutation="mrs">
		<name>
			<fname>Marry</fname>
			<lname>Hlly</lname>
		</name>
		<age>44</age>
		<dept-name>Accounts</dept-name>
	</emp>
</emps>

{
	emps[
		emp:{
			solution:"mr",
			name:{
				fname: "Harry",
				lname: "potter",
				},
			age:33,
			dept-name: "Accounts"
			}
		emp:{
			}
	]
}

# means current page in html.


http://localhost:8080/DymamicWorks/resources/message/1 ->get
1: get the 1st message

ttp://localhost:8080/DymamicWorks/resources/message/1/comments ->get
comments: get the all the comments of the first message

ttp://localhost:8080/DymamicWorks/resources/message/1/comments/3 ->get
get 3rd comments of the 1st message


db.emps.insert({empid:111, empname: 'kanchan', empsal: 20300});
db.emps.insert({empid:112, empname: 'chan', empsal: 200880});
db.emps.insert({empid:113, empname: 'britt', empsal: 2.000});
db.emps.insert({empid:114, empname: 'kan', empsal: 2000});
db.emps.insert({empid:115, empname: 'kim', empsal: 200.30});
db.emps.insert({empid:116, empname: 'kim kkk', empsal: 1000});
db.emps.insert({empid:117, empname: 'kim yyy', empsal: 4000});





db.emps.find({}, {empsal:1, _id:0}).sort({empsal:-1});
no condition

empsal:1, _id:0}): don't want to see _id, display empsal 
sort decending